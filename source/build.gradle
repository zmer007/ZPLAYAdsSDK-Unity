/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */
defaultTasks 'exportPackage'

project.ext {
    sdk_root = System.getProperty("ANDROID_HOME")
    if (sdk_root == null || sdk_root.isEmpty()) {
        sdk_root = System.getenv("ANDROID_HOME")
    }

    unity_exe = System.getProperty("UNITY_EXE")
    if (unity_exe == null || unity_exe.isEmpty()) {
        unity_exe = System.getenv("UNITY_EXE")
    }
    if (unity_exe == null || unity_exe.isEmpty()) {
        unity_exe ='/Applications/Unity/Unity.app/Contents/MacOS/Unity'
    }

    git_exe = System.getProperty("GIT_EXE")
    if (git_exe == null || git_exe.isEmpty()) {
        git_exe = System.getenv("GIT_EXE")
    }
    if (git_exe == null || git_exe.isEmpty()) {
        git_exe = 'git'
    }

    resolverPackageUri = System.getProperty("RESOLVER_PACKAGE_URI")
    jarResolverRepo = 'https://github.com/googlesamples/unity-jar-resolver.git'

    pluginSource = file('source/plugin').absolutePath
    pluginBuildDir = file('temp/plugin-build-dir').absolutePath
    exportPath = file('ZPLAYMobileAds.unitypackage').absolutePath

    tempPath = file('temp').absolutePath
    resolverDir = file("${tempPath}/jarresolver").absolutePath
}

// Delete existing android plugin jar file.
task clearJar(type: Delete) {
    delete 'android-library/app/build/intermediates/bundles/release/unity-plugin-library.jar'
}

// Build jar from android plugin source files using existing Gradle build file.
task buildAndroidPluginJar(type: GradleBuild) {
    buildFile = 'android-library/app/build.gradle'
    tasks = ['build']
}

// Move android plugin jar to temporary build directory.
task copyAndroidLibraryJar(type: Copy) {
    from("android-library/app/build/intermediates/intermediate-jars/release/")
    into("${pluginBuildDir}/Assets/Plugins/Android/libs")
    include('classes.jar')
    rename('classes.jar', 'unity-plugin-library.jar')
}

copyAndroidLibraryJar.dependsOn(clearJar, buildAndroidPluginJar)

// task downloadResolver() {
//     description = "Download the Play Services Resolver"
//     if (resolverPackageUri != null) {
//         mkdir("${resolverDir}")
//         def resolver = new File("${resolverDir}/resolver.unitypackage")
//         new URL("${resolverPackageUri}").withInputStream {
//             inputStream -> resolver.withOutputStream { it << inputStream }
//         }
//     } else {
//         println 'clone ' + jarResolverRepo
//         def result = exec {
//             executable "${git_exe}"
//             args "clone", jarResolverRepo, "${resolverDir}"
//         }
//         if (result.exitValue == 0) {
//             println "Downloaded resolver from " + jarResolverRepo
//         }
//     }
// }